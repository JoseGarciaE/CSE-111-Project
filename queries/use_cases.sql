
-- Queries to support use cases 
---- Example shown below. Will be used as prepared statements in backend.

-- INSERTING NEW USERS TO DATASET

INSERT INTO 
    User (u_name, u_email, u_password, u_universityid) 
VALUES ("Juan", "juan.one@gmail.com", "not actual password (stored as hashes)", 1);

INSERT INTO 
    User (u_name, u_email, u_password, u_universityid) 
VALUES ("Jose", "jose.nose@gmail.com", "not actual password (stored as hashes)", 1);

INSERT INTO 
    LibraryUser (lu_userid,lu_major)
VALUES (11, "Computer Science");

INSERT INTO Librarian 
    (l_userid,l_salary) 
VALUES (12, 60000);


-- SEARCHING FOR BOOKS

SELECT *
FROM Books
WHERE b_isbn = "439785960";

SELECT * 
FROM Books 
WHERE b_title like "%The Art of the Deal%";

SELECT *
FROM Books, BookTags, Tags
WHERE b_bookid = bt_bookid AND 
    bt_tagid = t_tagid AND 
    t_description = "comedy";

SELECT *
FROM Books, Author
WHERE b_authorid = a_authorid AND 
    a_authorname LIKE "%J.K. Rowling%";


---- Availability for every book in specific univeristy

SELECT b_isbn, 
    CASE 
        WHEN s_bookcount IS NULL THEN 0
        ELSE s_bookcount
    END AS bookcount
FROM 
    Books

    LEFT JOIN 

    (SELECT * 
    FROM StockRoom 
    WHERE s_universityid = 1) S

    ON S.s_isbn = b_isbn;


---- All books not in given location 

SELECT b_isbn, b_title
FROM Books

EXCEPT

SELECT b_isbn, b_title
FROM StockRoom, Books
WHERE s_isbn = b_isbn AND 
    s_universityid = 1;


-- DELETING BOOKS FROM DATASET
---- To delete a book from Book table, make sure that 
---- no one has the book checked out and that no university
---- has any count in their StockRoom. Checks made in backend.

DELETE FROM StockRoom 
where s_isbn = "439785960" and 
    s_universityid = 1;

----- Only if no StockRoom has it anymore
DELETE FROM Books
where b_isbn = "439785960";

DELETE FROM BookTags
where bt_bookid = 1;


-- ADDING MORE BOOKS TO DATASET

---- Book ID generated by backend
INSERT INTO Books 
VALUES (32075672, "081298840B", 4067, 2013, "When Breath Becomes Wind");

---- Check if author is not in Author table to do this
INSERT INTO Author 
VALUES (4067, "Paul Kalanithii");

---- Insert into library from librarian 
INSERT INTO StockRoom
VALUES (1, "081298840X", 4);

---- Optional: add genres to the book
INSERT INTO BookTags
VALUES (32075672, 1);


-- EDITING BOOKS 

---- Need to make sure it doesn't cause other conflicts
UPDATE Books
set b_isbn = "081298840X"
where b_isbn = "081298840B";

UPDATE Books
set b_title = "When Breath Becomes Air"
where b_isbn = "081298840X";

UPDATE Books
set b_publishedyear = 2016
where b_isbn = "081298840X";

---- Check if author name is already in database
UPDATE Author
set a_authorname = "Paul Kalanithi"
where a_authorid = 4067;


---------------------
--- DEMO PURPOSES ---
---------------------
SELECT *
FROM Books 
WHERE b_isbn = "081298840X";


-- UPDATING STOCK ROOM 

UPDATE StockRoom
SET s_bookcount = (
    SELECT s_bookcount - 1
    FROM StockRoom, Books, University
    WHERE b_isbn = s_isbn AND 
        s_universityid = un_id AND 
        s_universityid = 2 AND 
        s_isbn = "439785960")
WHERE s_isbn = "439785960" AND 
    s_universityid = 2;

UPDATE StockRoom
SET s_bookcount = (
    SELECT s_bookcount + 1
    FROM StockRoom, Books, University
    WHERE b_isbn = s_isbn AND 
        s_universityid = un_id AND 
        s_universityid = 2 AND 
        s_isbn = "439785960")
WHERE s_isbn = "439785960" AND 
    s_universityid = 2;


---------------------
--- DEMO PURPOSES ---
---------------------
SELECT *
FROM StockRoom
WHERE s_isbn = "439785960";


-- CHECK-OUT BOOKS

---- Check availability of book beforehand 
INSERT INTO CheckedBooks 
VALUES("60929871", 2, "2020-11-08", "2020-12-07");


-- RESERVE BOOKS

INSERT INTO ReservedBooks 
VALUES("60929871", 1, "2020-11-08", "NO MORE COPIES");



-- POSSIBLE NEW USE CASE: FUN FACTS

SELECT t_description as genre, COUNT(*) as count 
FROM Books, BookTags, Tags 
WHERE b_bookid = bt_bookid and 
    bt_tagid = t_tagid 
GROUP BY t_description;

SELECT un_name, SUM(s_bookcount)
FROM StockRoom, University
WHERE un_id = s_universityid
GROUP BY un_id;